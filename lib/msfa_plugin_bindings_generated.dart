// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/msfa_plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class MsfaPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MsfaPluginBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MsfaPluginBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int initEngine() {
    return _initEngine();
  }

  late final _initEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('initEngine');
  late final _initEngine = _initEnginePtr.asFunction<int Function()>();

  void sendMidi(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _sendMidi(
      bytes,
      size,
    );
  }

  late final _sendMidiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>('sendMidi');
  late final _sendMidi =
      _sendMidiPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void shutdownEngine() {
    return _shutdownEngine();
  }

  late final _shutdownEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('shutdownEngine');
  late final _shutdownEngine = _shutdownEnginePtr.asFunction<void Function()>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final MsfaPluginBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get shutdownEngine =>
      _library._shutdownEnginePtr;
}

abstract class msfa_result {
  static const int MSFA_SUCCESS = 0;

  /// A generic error.
  static const int MSFA_ERROR = -1;
  static const int MSFA_AUDIO_OPEN_FAILED = -2;
  static const int MSFA_AUDIO_START_FAILED = -2;
}
